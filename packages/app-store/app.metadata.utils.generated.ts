/**
    This file is autogenerated using the command `yarn app-store:build --watch`.
    Don't modify this file manually.
**/
import type { AppMeta } from "@calcom/types/App";

import { AppMetadataMap } from "./app.metadata.generated";

export async function getAppFromSlug(slug: string | undefined): Promise<AppMeta | undefined> {
  if (!slug) return undefined;

  for (const [appKey, appImport] of Object.entries(AppMetadataMap)) {
    try {
      const appMeta = await appImport;
      const app = appMeta.default || appMeta;
      if (app.slug === slug) {
        return app as AppMeta;
      }
    } catch (error) {
      console.warn(`Failed to load app metadata for ${appKey}:`, error);
    }
  }
  return undefined;
}

export async function getAppName(name: string): Promise<string | null> {
  const appImport = AppMetadataMap[name as keyof typeof AppMetadataMap];
  if (!appImport) return null;

  try {
    const appMeta = await appImport;
    const app = appMeta.default || appMeta;
    return app?.name ?? null;
  } catch (error) {
    console.warn(`Failed to load app metadata for ${name}:`, error);
    return null;
  }
}

export async function getAppType(name: string): Promise<string> {
  const appImport = AppMetadataMap[name as keyof typeof AppMetadataMap];
  if (!appImport) return "Unknown";

  try {
    const appMeta = await appImport;
    const app = appMeta.default || appMeta;
    const type = app?.type;

    if (type?.endsWith("_calendar")) {
      return "Calendar";
    }
    if (type?.endsWith("_payment")) {
      return "Payment";
    }
    return "Unknown";
  } catch (error) {
    console.warn(`Failed to load app metadata for ${name}:`, error);
    return "Unknown";
  }
}

export async function getAppFromLocationValue(type: string): Promise<AppMeta | undefined> {
  for (const [appKey, appImport] of Object.entries(AppMetadataMap)) {
    try {
      const appMeta = await appImport;
      const app = appMeta.default || appMeta;
      if (app?.appData?.location?.type === type) {
        return app as AppMeta;
      }
    } catch (error) {
      console.warn(`Failed to load app metadata for ${appKey}:`, error);
    }
  }
  return undefined;
}

export function getAppFromSlugSync(slug: string | undefined): AppMeta | undefined {
  if (!slug) return undefined;

  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const ALL_APPS = Object.values(appStoreMetadata);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return ALL_APPS.find((app: any) => app.slug === slug) as AppMeta | undefined;
}

export function getAppNameSync(name: string): string | null {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  return appStoreMetadata[name as keyof typeof appStoreMetadata]?.name ?? null;
}

export function getAppTypeSync(name: string): string {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const type = appStoreMetadata[name as keyof typeof appStoreMetadata]?.type;

  if (type?.endsWith("_calendar")) {
    return "Calendar";
  }
  if (type?.endsWith("_payment")) {
    return "Payment";
  }
  return "Unknown";
}

export function getAppFromLocationValueSync(type: string): AppMeta | undefined {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const ALL_APPS = Object.values(appStoreMetadata);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return ALL_APPS.find((app: any) => app?.appData?.location?.type === type) as AppMeta | undefined;
}
