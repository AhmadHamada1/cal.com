/**
    This file is autogenerated using the command `yarn app-store:build --watch`.
    Don't modify this file manually.
**/
import type { AppMeta } from "@calcom/types/App";

import { AnalyticsMetadataMap } from "./analytics.metadata.generated";
import { CalendarMetadataMap } from "./calendar.metadata.generated";
import { CrmMetadataMap } from "./crm.metadata.generated";
import { LocationMetadataMap } from "./location.metadata.generated";
import { PaymentMetadataMap } from "./payment.metadata.generated";
import { VideoMetadataMap } from "./video.metadata.generated";

export async function getAppFromSlug(slug: string | undefined): Promise<AppMeta | undefined> {
  if (!slug) return undefined;

  const allMetadataMaps = [
    CalendarMetadataMap,
    PaymentMetadataMap,
    VideoMetadataMap,
    AnalyticsMetadataMap,
    CrmMetadataMap,
    LocationMetadataMap,
  ];

  for (const metadataMap of allMetadataMaps) {
    for (const [appKey, appImport] of Object.entries(metadataMap)) {
      try {
        const appMeta = await appImport;
        const app = (appMeta as any).metadata;
        if (app.slug === slug) {
          return app as AppMeta;
        }
      } catch (error) {
        console.warn(`Failed to load app metadata for ${appKey}:`, error);
      }
    }
  }
  return undefined;
}

export async function getAppName(name: string): Promise<string | null> {
  const allMetadataMaps = [
    CalendarMetadataMap,
    PaymentMetadataMap,
    VideoMetadataMap,
    AnalyticsMetadataMap,
    CrmMetadataMap,
    LocationMetadataMap,
  ];

  for (const metadataMap of allMetadataMaps) {
    const appImport = metadataMap[name as keyof typeof metadataMap];
    if (appImport) {
      try {
        const appMeta = await appImport;
        const app = (appMeta as any).metadata;
        return app?.name ?? null;
      } catch (error) {
        console.warn(`Failed to load app metadata for ${name}:`, error);
      }
    }
  }
  return null;
}

export async function getAppType(name: string): Promise<string> {
  const allMetadataMaps = [
    CalendarMetadataMap,
    PaymentMetadataMap,
    VideoMetadataMap,
    AnalyticsMetadataMap,
    CrmMetadataMap,
    LocationMetadataMap,
  ];

  for (const metadataMap of allMetadataMaps) {
    const appImport = metadataMap[name as keyof typeof metadataMap];
    if (appImport) {
      try {
        const appMeta = await appImport;
        const app = (appMeta as any).metadata;
        const type = app?.type;

        if (type?.endsWith("_calendar")) {
          return "Calendar";
        }
        if (type?.endsWith("_payment")) {
          return "Payment";
        }
        if (type?.endsWith("_video")) {
          return "Video";
        }
        if (type?.endsWith("_analytics")) {
          return "Analytics";
        }
        if (type?.endsWith("_crm")) {
          return "CRM";
        }
        return "Unknown";
      } catch (error) {
        console.warn(`Failed to load app metadata for ${name}:`, error);
      }
    }
  }
  return "Unknown";
}

export async function getAppFromLocationValue(type: string): Promise<AppMeta | undefined> {
  for (const [appKey, appImport] of Object.entries(LocationMetadataMap)) {
    try {
      const appMeta = await appImport;
      const app = appMeta.metadata;
      if (
        app &&
        "appData" in app &&
        app.appData &&
        "location" in app.appData &&
        app.appData.location?.type === type
      ) {
        return app as AppMeta;
      }
    } catch (error) {
      console.warn(`Failed to load app metadata for ${appKey}:`, error);
    }
  }
  return undefined;
}

export function getAppFromSlugSync(slug: string | undefined): AppMeta | undefined {
  if (!slug) return undefined;

  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const ALL_APPS = Object.values(appStoreMetadata);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return ALL_APPS.find((app: any) => app.slug === slug) as AppMeta | undefined;
}

export function getAppNameSync(name: string): string | null {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  return appStoreMetadata[name as keyof typeof appStoreMetadata]?.name ?? null;
}

export function getAppTypeSync(name: string): string {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const type = appStoreMetadata[name as keyof typeof appStoreMetadata]?.type;

  if (type?.endsWith("_calendar")) {
    return "Calendar";
  }
  if (type?.endsWith("_payment")) {
    return "Payment";
  }
  return "Unknown";
}

export function getAppFromLocationValueSync(type: string): AppMeta | undefined {
  // eslint-disable-next-line @typescript-eslint/no-var-requires
  const { appStoreMetadata } = require("./appStoreMetaData");
  const ALL_APPS = Object.values(appStoreMetadata);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  return ALL_APPS.find((app: any) => app?.appData?.location?.type === type) as AppMeta | undefined;
}
